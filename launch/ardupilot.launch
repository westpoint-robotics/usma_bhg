<launch>
	<!-- vim: set ft=xml noet : -->
	<!-- launch script for ArduPilot based FCU's -->
	
	<param name="img_freq" value="20"/><!-- Frequency to take images in HZ -->
	
	
	<!-- <arg name="fcu_url" default="/dev/ttyUSB0:921600" /> -->
	<arg name="fcu_url" default="/dev/ttyACM0:921600" />
	<arg name="gcs_url" default="" />
	<arg name="tgt_system" default="1" />
	<arg name="tgt_component" default="1" />
	<arg name="log_output" default="screen" />
	<arg name="fcu_protocol" default="v2.0" />
	<arg name="respawn_mavros" default="true" />

	<arg name="pluginlists_yaml" value="$(find usma_bhg)/launch/apm_pluginlists.yaml" />
	<arg name="config_yaml" value="$(find usma_bhg)/launch/apm_config.yaml" />

	<node pkg="mavros" type="mavros_node" name="mavros" required="$(eval not respawn_mavros)" clear_params="true" output="$(arg log_output)" respawn="$(arg respawn_mavros)">
		<param name="fcu_url" value="$(arg fcu_url)" />
		<param name="gcs_url" value="$(arg gcs_url)" />
		<param name="target_system_id" value="$(arg tgt_system)" />
		<param name="target_component_id" value="$(arg tgt_component)" />
		<param name="fcu_protocol" value="$(arg fcu_protocol)" />

		<!-- load blacklist, config -->
		<rosparam command="load" file="$(arg pluginlists_yaml)" />
		<rosparam command="load" file="$(arg config_yaml)" />
	</node>
	
	<!-- DGPS Plugin running info:
	It is assumed that the DGPS data comes from the network address 127.0.0.1:13320. The DGPS data can be in the SBP/RTCP/UBC protocols -->
	
	<node pkg="rosservice" type="rosservice" name="mavros_set_stream_service" args="call --wait /mavros/set_stream_rate 0 10 1" />
	<!-- This sets the parameters and sends the command to set the pwm width. There is a delay of
	more than 27 seconds before any changes are sent. This appears to be needed as the mavlink wait
	command is not sufficient to dely the sending of these commands. Last check was 27 seconds from the
	start of master.launch to params uploaded and the system was ready for these commands to be sent
	<node pkg="usma_bhg" type="mavlink_trigger.py" name="tigger_setup" output='screen'/>   -->
	
	<!-- 
	<node pkg="rosservice" type="rosservice" name="mavros_set_stream_service" args="call -wait /mavros/set_stream_rate 0 10 1" />
	The below did not work well, they kept trying to run before the service was ready. 
	<node pkg="rosservice" type="rosservice" name="set_servo_rate" args="call -wait /mavros/param/set SERVO_RATE '[25, 0.0]'" />
	<node pkg="rosservice" type="rosservice" name="set_servo9_max" args="call -wait /mavros/param/set SERVO9_MAX '[50000, 0.0]'" />
	<node pkg="mavros" type="mavcmd" name="set_pixhwk_trigger_width" args="-wait long 183 9 25000 0 0 0 0 0"/>
	-->
</launch>
<!--
CLI versions for making the pixhawk generate a signal to synch cameras.

rosrun mavros mavparam set SERVO_RATE 20
rosrun mavros mavparam set SERVO9_MAX 30000
rosrun mavros mavcmd long 183 9 25000 0 0 0 0 0

Altrenatives that are equivalent to the commands used in the launch file
rosservice call /mavros/param/set SERVO9_MAX '[30000, 0.0]'
rosservice call /mavros/param/set SERVO_RATE '[35, 0.0]'
rosservice call /mavros/cmd/command 183 9 25000 0 0 0 0 0
-->
